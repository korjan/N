import { c as init, a as assign, e as createText, d as createElement, h as claimText, f as claimElement, g as children, i as detachNode, j as addLoc, k as insert, l as append, q as noop, b as protoDev } from './chunk.3ba4eeed.js';

/* src/routes/index.html generated by Svelte v2.16.1 */

const file = "src/routes/index.html";

function create_main_fragment(component, ctx) {
	var text0, h1, text1, text2, figure, img, text3, figcaption, text4, text5, p, strong, text6;

	return {
		c: function create() {
			text0 = createText("\n\n");
			h1 = createElement("h1");
			text1 = createText("Great success!");
			text2 = createText("\n\n");
			figure = createElement("figure");
			img = createElement("img");
			text3 = createText("\n\t");
			figcaption = createElement("figcaption");
			text4 = createText("HIGH FIVE!");
			text5 = createText("\n\n");
			p = createElement("p");
			strong = createElement("strong");
			text6 = createText("Try editing this file (routes/index.html) to test live reloading.");
			this.h();
		},

		l: function claim(nodes) {
			text0 = claimText(nodes, "\n\n");

			h1 = claimElement(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			text1 = claimText(h1_nodes, "Great success!");
			h1_nodes.forEach(detachNode);
			text2 = claimText(nodes, "\n\n");

			figure = claimElement(nodes, "FIGURE", { class: true }, false);
			var figure_nodes = children(figure);

			img = claimElement(figure_nodes, "IMG", { alt: true, src: true, class: true }, false);
			var img_nodes = children(img);

			img_nodes.forEach(detachNode);
			text3 = claimText(figure_nodes, "\n\t");

			figcaption = claimElement(figure_nodes, "FIGCAPTION", {}, false);
			var figcaption_nodes = children(figcaption);

			text4 = claimText(figcaption_nodes, "HIGH FIVE!");
			figcaption_nodes.forEach(detachNode);
			figure_nodes.forEach(detachNode);
			text5 = claimText(nodes, "\n\n");

			p = claimElement(nodes, "P", { class: true }, false);
			var p_nodes = children(p);

			strong = claimElement(p_nodes, "STRONG", {}, false);
			var strong_nodes = children(strong);

			text6 = claimText(strong_nodes, "Try editing this file (routes/index.html) to test live reloading.");
			strong_nodes.forEach(detachNode);
			p_nodes.forEach(detachNode);
			this.h();
		},

		h: function hydrate() {
			document.title = "Sapper project template";
			h1.className = "svelte-1kk9opm";
			addLoc(h1, file, 4, 0, 70);
			img.alt = "Borat";
			img.src = "great-success.png";
			img.className = "svelte-1kk9opm";
			addLoc(img, file, 7, 1, 105);
			addLoc(figcaption, file, 8, 1, 148);
			figure.className = "svelte-1kk9opm";
			addLoc(figure, file, 6, 0, 95);
			addLoc(strong, file, 11, 3, 198);
			p.className = "svelte-1kk9opm";
			addLoc(p, file, 11, 0, 195);
		},

		m: function mount(target, anchor) {
			insert(target, text0, anchor);
			insert(target, h1, anchor);
			append(h1, text1);
			insert(target, text2, anchor);
			insert(target, figure, anchor);
			append(figure, img);
			append(figure, text3);
			append(figure, figcaption);
			append(figcaption, text4);
			insert(target, text5, anchor);
			insert(target, p, anchor);
			append(p, strong);
			append(strong, text6);
		},

		p: noop,

		d: function destroy(detach) {
			if (detach) {
				detachNode(text0);
				detachNode(h1);
				detachNode(text2);
				detachNode(figure);
				detachNode(text5);
				detachNode(p);
			}
		}
	};
}

function Index(options) {
	this._debugName = '<Index>';
	if (!options || (!options.target && !options.root)) {
		throw new Error("'target' is a required option");
	}

	init(this, options);
	this._state = assign({}, options.data);
	this._intro = true;

	this._fragment = create_main_fragment(this, this._state);

	if (options.target) {
		var nodes = children(options.target);
		options.hydrate ? this._fragment.l(nodes) : this._fragment.c();
		nodes.forEach(detachNode);
		this._mount(options.target, options.anchor);
	}
}

assign(Index.prototype, protoDev);

Index.prototype._checkReadOnly = function _checkReadOnly(newState) {
};

export default Index;
