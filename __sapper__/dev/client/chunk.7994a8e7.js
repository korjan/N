import { c as init, a as assign, e as createText, d as createElement, h as claimText, f as claimElement, g as children, i as detachNode, j as addLoc, k as insert, l as append, p as setData, r as destroyEach, b as protoDev } from './chunk.3ba4eeed.js';

/* src/routes/blog/index.html generated by Svelte v2.16.1 */

function preload({ params, query }) {
	return this.fetch(`blog.json`).then(r => r.json()).then(posts => {
		return { posts };
	});
}
const file = "src/routes/blog/index.html";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.post = list[i];
	return child_ctx;
}

function create_main_fragment(component, ctx) {
	var text0, h1, text1, text2, ul;

	var each_value = ctx.posts;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(component, get_each_context(ctx, each_value, i));
	}

	return {
		c: function create() {
			text0 = createText("\n\n");
			h1 = createElement("h1");
			text1 = createText("Recent posts");
			text2 = createText("\n\n");
			ul = createElement("ul");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			this.h();
		},

		l: function claim(nodes) {
			text0 = claimText(nodes, "\n\n");

			h1 = claimElement(nodes, "H1", {}, false);
			var h1_nodes = children(h1);

			text1 = claimText(h1_nodes, "Recent posts");
			h1_nodes.forEach(detachNode);
			text2 = claimText(nodes, "\n\n");

			ul = claimElement(nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detachNode);
			this.h();
		},

		h: function hydrate() {
			document.title = "Blog";
			addLoc(h1, file, 4, 0, 51);
			ul.className = "svelte-1frg2tf";
			addLoc(ul, file, 6, 0, 74);
		},

		m: function mount(target, anchor) {
			insert(target, text0, anchor);
			insert(target, h1, anchor);
			append(h1, text1);
			insert(target, text2, anchor);
			insert(target, ul, anchor);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},

		p: function update(changed, ctx) {
			if (changed.posts) {
				each_value = ctx.posts;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(component, child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}
		},

		d: function destroy(detach) {
			if (detach) {
				detachNode(text0);
				detachNode(h1);
				detachNode(text2);
				detachNode(ul);
			}

			destroyEach(each_blocks, detach);
		}
	};
}

// (8:1) {#each posts as post}
function create_each_block(component, ctx) {
	var li, a, text_value = ctx.post.title, text, a_href_value;

	return {
		c: function create() {
			li = createElement("li");
			a = createElement("a");
			text = createText(text_value);
			this.h();
		},

		l: function claim(nodes) {
			li = claimElement(nodes, "LI", {}, false);
			var li_nodes = children(li);

			a = claimElement(li_nodes, "A", { rel: true, href: true }, false);
			var a_nodes = children(a);

			text = claimText(a_nodes, text_value);
			a_nodes.forEach(detachNode);
			li_nodes.forEach(detachNode);
			this.h();
		},

		h: function hydrate() {
			a.rel = "prefetch";
			a.href = a_href_value = "blog/" + ctx.post.slug;
			addLoc(a, file, 12, 6, 324);
			addLoc(li, file, 12, 2, 320);
		},

		m: function mount(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, text);
		},

		p: function update(changed, ctx) {
			if ((changed.posts) && text_value !== (text_value = ctx.post.title)) {
				setData(text, text_value);
			}

			if ((changed.posts) && a_href_value !== (a_href_value = "blog/" + ctx.post.slug)) {
				a.href = a_href_value;
			}
		},

		d: function destroy(detach) {
			if (detach) {
				detachNode(li);
			}
		}
	};
}

function Index(options) {
	this._debugName = '<Index>';
	if (!options || (!options.target && !options.root)) {
		throw new Error("'target' is a required option");
	}

	init(this, options);
	this._state = assign({}, options.data);
	if (!('posts' in this._state)) console.warn("<Index> was created without expected data property 'posts'");
	this._intro = true;

	this._fragment = create_main_fragment(this, this._state);

	if (options.target) {
		var nodes = children(options.target);
		options.hydrate ? this._fragment.l(nodes) : this._fragment.c();
		nodes.forEach(detachNode);
		this._mount(options.target, options.anchor);
	}
}

assign(Index.prototype, protoDev);

Index.prototype._checkReadOnly = function _checkReadOnly(newState) {
};

Index.preload = preload;

export default Index;
