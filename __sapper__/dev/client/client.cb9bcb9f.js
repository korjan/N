import { a as assign, b as protoDev, c as init, d as createElement, e as createText, f as claimElement, g as children, h as claimText, i as detachNode, j as addLoc, k as insert, l as append, m as getSpreadUpdate, n as flush, o as createComment, p as setData } from './chunk.3ba4eeed.js';

/* src/components/Nav.html generated by Svelte v2.16.1 */

const file = "src/components/Nav.html";

function create_main_fragment(component, ctx) {
	var nav, ul, li0, a0, text0, a0_class_value, text1, li1, a1, text2, a1_class_value, text3, li2, a2, text4, a2_class_value;

	return {
		c: function create() {
			nav = createElement("nav");
			ul = createElement("ul");
			li0 = createElement("li");
			a0 = createElement("a");
			text0 = createText("home");
			text1 = createText("\n\t\t");
			li1 = createElement("li");
			a1 = createElement("a");
			text2 = createText("about");
			text3 = createText("\n\n\t\t\n\t\t");
			li2 = createElement("li");
			a2 = createElement("a");
			text4 = createText("blog");
			this.h();
		},

		l: function claim(nodes) {
			nav = claimElement(nodes, "NAV", { class: true }, false);
			var nav_nodes = children(nav);

			ul = claimElement(nav_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li0 = claimElement(ul_nodes, "LI", { class: true }, false);
			var li0_nodes = children(li0);

			a0 = claimElement(li0_nodes, "A", { class: true, href: true }, false);
			var a0_nodes = children(a0);

			text0 = claimText(a0_nodes, "home");
			a0_nodes.forEach(detachNode);
			li0_nodes.forEach(detachNode);
			text1 = claimText(ul_nodes, "\n\t\t");

			li1 = claimElement(ul_nodes, "LI", { class: true }, false);
			var li1_nodes = children(li1);

			a1 = claimElement(li1_nodes, "A", { class: true, href: true }, false);
			var a1_nodes = children(a1);

			text2 = claimText(a1_nodes, "about");
			a1_nodes.forEach(detachNode);
			li1_nodes.forEach(detachNode);
			text3 = claimText(ul_nodes, "\n\n\t\t\n\t\t");

			li2 = claimElement(ul_nodes, "LI", { class: true }, false);
			var li2_nodes = children(li2);

			a2 = claimElement(li2_nodes, "A", { rel: true, class: true, href: true }, false);
			var a2_nodes = children(a2);

			text4 = claimText(a2_nodes, "blog");
			a2_nodes.forEach(detachNode);
			li2_nodes.forEach(detachNode);
			ul_nodes.forEach(detachNode);
			nav_nodes.forEach(detachNode);
			this.h();
		},

		h: function hydrate() {
			a0.className = a0_class_value = "" + (ctx.segment === ctx.undefined ? "selected" : "") + " svelte-18u57i1";
			a0.href = ".";
			addLoc(a0, file, 2, 6, 18);
			li0.className = "svelte-18u57i1";
			addLoc(li0, file, 2, 2, 14);
			a1.className = a1_class_value = "" + (ctx.segment === "about" ? "selected" : "") + " svelte-18u57i1";
			a1.href = "about";
			addLoc(a1, file, 3, 6, 100);
			li1.className = "svelte-18u57i1";
			addLoc(li1, file, 3, 2, 96);
			a2.rel = "prefetch";
			a2.className = a2_class_value = "" + (ctx.segment === "blog" ? "selected" : "") + " svelte-18u57i1";
			a2.href = "blog";
			addLoc(a2, file, 7, 6, 343);
			li2.className = "svelte-18u57i1";
			addLoc(li2, file, 7, 2, 339);
			ul.className = "svelte-18u57i1";
			addLoc(ul, file, 1, 1, 7);
			nav.className = "svelte-18u57i1";
			addLoc(nav, file, 0, 0, 0);
		},

		m: function mount(target, anchor) {
			insert(target, nav, anchor);
			append(nav, ul);
			append(ul, li0);
			append(li0, a0);
			append(a0, text0);
			append(ul, text1);
			append(ul, li1);
			append(li1, a1);
			append(a1, text2);
			append(ul, text3);
			append(ul, li2);
			append(li2, a2);
			append(a2, text4);
		},

		p: function update(changed, ctx) {
			if ((changed.segment || changed.undefined) && a0_class_value !== (a0_class_value = "" + (ctx.segment === ctx.undefined ? "selected" : "") + " svelte-18u57i1")) {
				a0.className = a0_class_value;
			}

			if ((changed.segment) && a1_class_value !== (a1_class_value = "" + (ctx.segment === "about" ? "selected" : "") + " svelte-18u57i1")) {
				a1.className = a1_class_value;
			}

			if ((changed.segment) && a2_class_value !== (a2_class_value = "" + (ctx.segment === "blog" ? "selected" : "") + " svelte-18u57i1")) {
				a2.className = a2_class_value;
			}
		},

		d: function destroy(detach) {
			if (detach) {
				detachNode(nav);
			}
		}
	};
}

function Nav(options) {
	this._debugName = '<Nav>';
	if (!options || (!options.target && !options.root)) {
		throw new Error("'target' is a required option");
	}

	init(this, options);
	this._state = assign({ undefined : undefined }, options.data);
	if (!('segment' in this._state)) console.warn("<Nav> was created without expected data property 'segment'");
	this._intro = true;

	this._fragment = create_main_fragment(this, this._state);

	if (options.target) {
		var nodes = children(options.target);
		options.hydrate ? this._fragment.l(nodes) : this._fragment.c();
		nodes.forEach(detachNode);
		this._mount(options.target, options.anchor);
	}
}

assign(Nav.prototype, protoDev);

Nav.prototype._checkReadOnly = function _checkReadOnly(newState) {
};

/* src/routes/_layout.html generated by Svelte v2.16.1 */

const file$1 = "src/routes/_layout.html";

function create_main_fragment$1(component, ctx) {
	var text, main;

	var nav_initial_data = { segment: ctx.child.segment };
	var nav = new Nav({
		root: component.root,
		store: component.store,
		data: nav_initial_data
	});

	var switch_instance_spread_levels = [
		ctx.child.props
	];

	var switch_value = ctx.child.component;

	function switch_props(ctx) {
		var switch_instance_initial_data = {};
		for (var i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_initial_data = assign(switch_instance_initial_data, switch_instance_spread_levels[i]);
		}
		return {
			root: component.root,
			store: component.store,
			data: switch_instance_initial_data
		};
	}

	if (switch_value) {
		var switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c: function create() {
			nav._fragment.c();
			text = createText("\n\n");
			main = createElement("main");
			if (switch_instance) switch_instance._fragment.c();
			this.h();
		},

		l: function claim(nodes) {
			nav._fragment.l(nodes);
			text = claimText(nodes, "\n\n");

			main = claimElement(nodes, "MAIN", { class: true }, false);
			var main_nodes = children(main);

			if (switch_instance) switch_instance._fragment.l(main_nodes);
			main_nodes.forEach(detachNode);
			this.h();
		},

		h: function hydrate() {
			main.className = "svelte-1uhnsl8";
			addLoc(main, file$1, 2, 0, 32);
		},

		m: function mount(target, anchor) {
			nav._mount(target, anchor);
			insert(target, text, anchor);
			insert(target, main, anchor);

			if (switch_instance) {
				switch_instance._mount(main, null);
			}
		},

		p: function update(changed, ctx) {
			var nav_changes = {};
			if (changed.child) nav_changes.segment = ctx.child.segment;
			nav._set(nav_changes);

			var switch_instance_changes = changed.child ? getSpreadUpdate(switch_instance_spread_levels, [
				ctx.child.props
			]) : {};

			if (switch_value !== (switch_value = ctx.child.component)) {
				if (switch_instance) {
					switch_instance.destroy();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					switch_instance._fragment.c();
					switch_instance._mount(main, null);
				} else {
					switch_instance = null;
				}
			}

			else if (switch_value) {
				switch_instance._set(switch_instance_changes);
			}
		},

		d: function destroy(detach) {
			nav.destroy(detach);
			if (detach) {
				detachNode(text);
				detachNode(main);
			}

			if (switch_instance) switch_instance.destroy();
		}
	};
}

function Layout(options) {
	this._debugName = '<Layout>';
	if (!options || (!options.target && !options.root)) {
		throw new Error("'target' is a required option");
	}

	init(this, options);
	this._state = assign({}, options.data);
	if (!('child' in this._state)) console.warn("<Layout> was created without expected data property 'child'");
	this._intro = true;

	this._fragment = create_main_fragment$1(this, this._state);

	if (options.target) {
		var nodes = children(options.target);
		options.hydrate ? this._fragment.l(nodes) : this._fragment.c();
		nodes.forEach(detachNode);
		this._mount(options.target, options.anchor);

		flush(this);
	}
}

assign(Layout.prototype, protoDev);

Layout.prototype._checkReadOnly = function _checkReadOnly(newState) {
};

/* src/routes/_error.html generated by Svelte v2.16.1 */

const file$2 = "src/routes/_error.html";

function create_main_fragment$2(component, ctx) {
	var title_value, text0, h1, text1, text2, p, text3_value = ctx.error.message, text3, text4, if_block_anchor;

	document.title = title_value = ctx.status;

	var if_block = (ctx.error.stack) && create_if_block(component, ctx);

	return {
		c: function create() {
			text0 = createText("\n\n");
			h1 = createElement("h1");
			text1 = createText(ctx.status);
			text2 = createText("\n\n");
			p = createElement("p");
			text3 = createText(text3_value);
			text4 = createText("\n\n");
			if (if_block) if_block.c();
			if_block_anchor = createComment();
			this.h();
		},

		l: function claim(nodes) {
			text0 = claimText(nodes, "\n\n");

			h1 = claimElement(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			text1 = claimText(h1_nodes, ctx.status);
			h1_nodes.forEach(detachNode);
			text2 = claimText(nodes, "\n\n");

			p = claimElement(nodes, "P", { class: true }, false);
			var p_nodes = children(p);

			text3 = claimText(p_nodes, text3_value);
			p_nodes.forEach(detachNode);
			text4 = claimText(nodes, "\n\n");
			if (if_block) if_block.l(nodes);
			if_block_anchor = createComment();
			this.h();
		},

		h: function hydrate() {
			h1.className = "svelte-8od9u6";
			addLoc(h1, file$2, 4, 0, 55);
			p.className = "svelte-8od9u6";
			addLoc(p, file$2, 6, 0, 74);
		},

		m: function mount(target, anchor) {
			insert(target, text0, anchor);
			insert(target, h1, anchor);
			append(h1, text1);
			insert(target, text2, anchor);
			insert(target, p, anchor);
			append(p, text3);
			insert(target, text4, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},

		p: function update(changed, ctx) {
			if ((changed.status) && title_value !== (title_value = ctx.status)) {
				document.title = title_value;
			}

			if (changed.status) {
				setData(text1, ctx.status);
			}

			if ((changed.error) && text3_value !== (text3_value = ctx.error.message)) {
				setData(text3, text3_value);
			}

			if (ctx.error.stack) {
				if (if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block = create_if_block(component, ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},

		d: function destroy(detach) {
			if (detach) {
				detachNode(text0);
				detachNode(h1);
				detachNode(text2);
				detachNode(p);
				detachNode(text4);
			}

			if (if_block) if_block.d(detach);
			if (detach) {
				detachNode(if_block_anchor);
			}
		}
	};
}

// (9:0) {#if dev && error.stack}
function create_if_block(component, ctx) {
	var pre, text_value = ctx.error.stack, text;

	return {
		c: function create() {
			pre = createElement("pre");
			text = createText(text_value);
			this.h();
		},

		l: function claim(nodes) {
			pre = claimElement(nodes, "PRE", {}, false);
			var pre_nodes = children(pre);

			text = claimText(pre_nodes, text_value);
			pre_nodes.forEach(detachNode);
			this.h();
		},

		h: function hydrate() {
			addLoc(pre, file$2, 9, 1, 124);
		},

		m: function mount(target, anchor) {
			insert(target, pre, anchor);
			append(pre, text);
		},

		p: function update(changed, ctx) {
			if ((changed.error) && text_value !== (text_value = ctx.error.stack)) {
				setData(text, text_value);
			}
		},

		d: function destroy(detach) {
			if (detach) {
				detachNode(pre);
			}
		}
	};
}

function Error$1(options) {
	this._debugName = '<Error>';
	if (!options || (!options.target && !options.root)) {
		throw new Error$1("'target' is a required option");
	}

	init(this, options);
	this._state = assign({}, options.data);
	if (!('status' in this._state)) console.warn("<Error> was created without expected data property 'status'");
	if (!('error' in this._state)) console.warn("<Error> was created without expected data property 'error'");
	this._intro = true;

	this._fragment = create_main_fragment$2(this, this._state);

	if (options.target) {
		var nodes = children(options.target);
		options.hydrate ? this._fragment.l(nodes) : this._fragment.c();
		nodes.forEach(detachNode);
		this._mount(options.target, options.anchor);
	}
}

assign(Error$1.prototype, protoDev);

Error$1.prototype._checkReadOnly = function _checkReadOnly(newState) {
};

// This file is generated by Sapper — do not edit it!

function goto(href, opts = { replaceState: false }) {
    const target$$1 = select_route(new URL(href, document.baseURI));
    if (target$$1) {
        _history[opts.replaceState ? 'replaceState' : 'pushState']({ id: cid }, '', href);
        return navigate(target$$1, null).then(() => { });
    }
    location.href = href;
    return new Promise(f => { }); // never resolves
}

const ignore = [/^\/blog.json$/, /^\/blog\/([^\/]+?).json$/];
const components = [
	{
		js: () => import('./chunk.7973cc52.js'),
		css: ["chunk.7973cc52.css"]
	},
	{
		js: () => import('./chunk.679b8f4d.js'),
		css: []
	},
	{
		js: () => import('./chunk.7994a8e7.js'),
		css: ["chunk.7994a8e7.css"]
	},
	{
		js: () => import('./chunk.e8d1afb8.js'),
		css: ["chunk.e8d1afb8.css"]
	}
];
const pages = (d => [
	{
		// index.html
		pattern: /^\/?$/,
		parts: [
			{ i: 0 }
		]
	},

	{
		// about.html
		pattern: /^\/about\/?$/,
		parts: [
			{ i: 1 }
		]
	},

	{
		// blog/index.html
		pattern: /^\/blog\/?$/,
		parts: [
			null,
			{ i: 2 }
		]
	},

	{
		// blog/[slug].html
		pattern: /^\/blog\/([^\/]+?)\/?$/,
		parts: [
			null,
			{ i: 3, params: match => ({ slug: d(match[1]) }) }
		]
	}
])(decodeURIComponent);
let ready = false;
let root_component;
let segments = [];
let current_token;
let root_preload;
let root_data;
const root_props = {
    path: null,
    params: null,
    query: null,
    child: {
        segment: null,
        component: null,
        props: {}
    }
};
let prefetching = null;
function set_prefetching(href, promise) {
    prefetching = { href, promise };
}
let store;
function set_store(fn) {
    store = fn(initial_data.store);
}
let target;
function set_target(element) {
    target = element;
}
let uid = 1;
function set_uid(n) {
    uid = n;
}
let cid;
function set_cid(n) {
    cid = n;
}
const initial_data = typeof __SAPPER__ !== 'undefined' && __SAPPER__;
const _history = typeof history !== 'undefined' ? history : {
    pushState: (state, title, href) => { },
    replaceState: (state, title, href) => { },
    scrollRestoration: ''
};
const scroll_history = {};
function select_route(url) {
    if (url.origin !== location.origin)
        return null;
    if (!url.pathname.startsWith(initial_data.baseUrl))
        return null;
    const path = url.pathname.slice(initial_data.baseUrl.length);
    // avoid accidental clashes between server routes and pages
    if (ignore.some(pattern => pattern.test(path)))
        return;
    for (let i = 0; i < pages.length; i += 1) {
        const page = pages[i];
        const match = page.pattern.exec(path);
        if (match) {
            const query = Object.create(null);
            if (url.search.length > 0) {
                url.search.slice(1).split('&').forEach(searchParam => {
                    let [, key, value] = /([^=]*)(?:=(.*))?/.exec(decodeURIComponent(searchParam));
                    value = (value || '').replace(/\+/g, ' ');
                    if (typeof query[key] === 'string')
                        query[key] = [query[key]];
                    if (typeof query[key] === 'object')
                        query[key].push(value);
                    else
                        query[key] = value;
                });
            }
            return { url, path, page, match, query };
        }
    }
}
function scroll_state() {
    return {
        x: pageXOffset,
        y: pageYOffset
    };
}
function navigate(target, id, noscroll, hash) {
    if (id) {
        // popstate or initial navigation
        cid = id;
    }
    else {
        const current_scroll = scroll_state();
        // clicked on a link. preserve scroll state
        scroll_history[cid] = current_scroll;
        id = cid = ++uid;
        scroll_history[cid] = noscroll ? current_scroll : { x: 0, y: 0 };
    }
    cid = id;
    if (root_component) {
        root_component.set({ preloading: true });
    }
    const loaded = prefetching && prefetching.href === target.url.href ?
        prefetching.promise :
        prepare_page(target);
    prefetching = null;
    const token = current_token = {};
    return loaded.then(({ redirect, data, nullable_depth }) => {
        if (redirect) {
            return goto(redirect.location, { replaceState: true });
        }
        render(data, nullable_depth, scroll_history[id], noscroll, hash, token);
        if (document.activeElement)
            document.activeElement.blur();
    });
}
function render(data, nullable_depth, scroll, noscroll, hash, token) {
    if (current_token !== token)
        return;
    if (root_component) {
        // first, clear out highest-level root component
        let level = data.child;
        for (let i = 0; i < nullable_depth; i += 1) {
            if (i === nullable_depth)
                break;
            level = level.props.child;
        }
        const { component } = level;
        level.component = null;
        root_component.set({ child: data.child });
        // then render new stuff
        level.component = component;
        root_component.set(data);
    }
    else {
        // first load — remove SSR'd <head> contents
        const start = document.querySelector('#sapper-head-start');
        const end = document.querySelector('#sapper-head-end');
        if (start && end) {
            while (start.nextSibling !== end)
                detach(start.nextSibling);
            detach(start);
            detach(end);
        }
        Object.assign(data, root_data);
        root_component = new Layout({
            target,
            data,
            store,
            hydrate: true
        });
    }
    if (!noscroll) {
        if (hash) {
            // scroll is an element id (from a hash), we need to compute y.
            const deep_linked = document.querySelector(hash);
            if (deep_linked) {
                scroll = {
                    x: 0,
                    y: deep_linked.getBoundingClientRect().top
                };
            }
        }
        scroll_history[cid] = scroll;
        if (scroll)
            scrollTo(scroll.x, scroll.y);
    }
    Object.assign(root_props, data);
    ready = true;
}
function prepare_page(target) {
    const { page, path, query } = target;
    const new_segments = path.split('/').filter(Boolean);
    let changed_from = 0;
    while (segments[changed_from] &&
        new_segments[changed_from] &&
        segments[changed_from] === new_segments[changed_from])
        changed_from += 1;
    let redirect = null;
    let error = null;
    const preload_context = {
        store,
        fetch: (url, opts) => fetch(url, opts),
        redirect: (statusCode, location) => {
            if (redirect && (redirect.statusCode !== statusCode || redirect.location !== location)) {
                throw new Error(`Conflicting redirects`);
            }
            redirect = { statusCode, location };
        },
        error: (statusCode, message) => {
            error = { statusCode, message };
        }
    };
    if (!root_preload) {
        root_preload = Layout.preload
            ? initial_data.preloaded[0] || Layout.preload.call(preload_context, {
                path,
                query,
                params: {}
            })
            : {};
    }
    return Promise.all(page.parts.map((part, i) => {
        if (i < changed_from)
            return null;
        if (!part)
            return null;
        return load_component(components[part.i]).then(Component => {
            const req = {
                path,
                query,
                params: part.params ? part.params(target.match) : {}
            };
            let preloaded;
            if (ready || !initial_data.preloaded[i + 1]) {
                preloaded = Component.preload
                    ? Component.preload.call(preload_context, req)
                    : {};
            }
            else {
                preloaded = initial_data.preloaded[i + 1];
            }
            return Promise.resolve(preloaded).then(preloaded => {
                return { Component, preloaded };
            });
        });
    })).catch(err => {
        error = { statusCode: 500, message: err };
        return [];
    }).then(results => {
        if (root_data) {
            return results;
        }
        else {
            return Promise.resolve(root_preload).then(value => {
                root_data = value;
                return results;
            });
        }
    }).then(results => {
        if (redirect) {
            return { redirect };
        }
        segments = new_segments;
        const get_params = page.parts[page.parts.length - 1].params || (() => ({}));
        const params = get_params(target.match);
        if (error) {
            const props = {
                path,
                query,
                params,
                error: typeof error.message === 'string' ? new Error(error.message) : error.message,
                status: error.statusCode
            };
            return {
                data: Object.assign({}, props, {
                    preloading: false,
                    child: {
                        component: Error$1,
                        props
                    }
                })
            };
        }
        const props = { path, query, error: null, status: null };
        const data = {
            path,
            preloading: false,
            child: Object.assign({}, root_props.child, {
                segment: segments[0]
            })
        };
        if (changed(query, root_props.query))
            data.query = query;
        if (changed(params, root_props.params))
            data.params = params;
        let level = data.child;
        let nullable_depth = 0;
        for (let i = 0; i < page.parts.length; i += 1) {
            const part = page.parts[i];
            if (!part)
                continue;
            const get_params = part.params || (() => ({}));
            if (i < changed_from) {
                level.props.path = path;
                level.props.query = query;
                level.props.child = Object.assign({}, level.props.child);
                nullable_depth += 1;
            }
            else {
                level.component = results[i].Component;
                level.props = Object.assign({}, level.props, props, {
                    params: get_params(target.match),
                }, results[i].preloaded);
                level.props.child = {};
            }
            level = level.props.child;
            level.segment = segments[i + 1];
        }
        return { data, nullable_depth };
    });
}
function load_css(chunk) {
    const href = `client/${chunk}`;
    if (document.querySelector(`link[href="${href}"]`))
        return;
    return new Promise((fulfil, reject) => {
        const link = document.createElement('link');
        link.rel = 'stylesheet';
        link.href = href;
        link.onload = () => fulfil();
        link.onerror = reject;
        document.head.appendChild(link);
    });
}
function load_component(component) {
    // TODO this is temporary — once placeholders are
    // always rewritten, scratch the ternary
    const promises = (typeof component.css === 'string' ? [] : component.css.map(load_css));
    promises.unshift(component.js());
    return Promise.all(promises).then(values => values[0].default);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function changed(a, b) {
    return JSON.stringify(a) !== JSON.stringify(b);
}

function prefetch(href) {
    const target$$1 = select_route(new URL(href, document.baseURI));
    if (target$$1) {
        if (!prefetching || href !== prefetching.href) {
            set_prefetching(href, prepare_page(target$$1));
        }
        return prefetching.promise;
    }
}

function start(opts) {
    if ('scrollRestoration' in _history) {
        _history.scrollRestoration = 'manual';
    }
    set_target(opts.target);
    if (opts.store)
        set_store(opts.store);
    addEventListener('click', handle_click);
    addEventListener('popstate', handle_popstate);
    // prefetch
    addEventListener('touchstart', trigger_prefetch);
    addEventListener('mousemove', handle_mousemove);
    return Promise.resolve().then(() => {
        const { hash, href } = location;
        _history.replaceState({ id: uid }, '', href);
        if (!initial_data.error) {
            const target$$1 = select_route(new URL(location.href));
            if (target$$1)
                return navigate(target$$1, uid, false, hash);
        }
    });
}
let mousemove_timeout;
function handle_mousemove(event) {
    clearTimeout(mousemove_timeout);
    mousemove_timeout = setTimeout(() => {
        trigger_prefetch(event);
    }, 20);
}
function trigger_prefetch(event) {
    const a = find_anchor(event.target);
    if (!a || a.rel !== 'prefetch')
        return;
    prefetch(a.href);
}
function handle_click(event) {
    // Adapted from https://github.com/visionmedia/page.js
    // MIT license https://github.com/visionmedia/page.js#license
    if (which(event) !== 1)
        return;
    if (event.metaKey || event.ctrlKey || event.shiftKey)
        return;
    if (event.defaultPrevented)
        return;
    const a = find_anchor(event.target);
    if (!a)
        return;
    if (!a.href)
        return;
    // check if link is inside an svg
    // in this case, both href and target are always inside an object
    const svg = typeof a.href === 'object' && a.href.constructor.name === 'SVGAnimatedString';
    const href = String(svg ? a.href.baseVal : a.href);
    if (href === location.href) {
        if (!location.hash)
            event.preventDefault();
        return;
    }
    // Ignore if tag has
    // 1. 'download' attribute
    // 2. rel='external' attribute
    if (a.hasAttribute('download') || a.getAttribute('rel') === 'external')
        return;
    // Ignore if <a> has a target
    if (svg ? a.target.baseVal : a.target)
        return;
    const url = new URL(href);
    // Don't handle hash changes
    if (url.pathname === location.pathname && url.search === location.search)
        return;
    const target$$1 = select_route(url);
    if (target$$1) {
        const noscroll = a.hasAttribute('sapper-noscroll');
        navigate(target$$1, null, noscroll, url.hash);
        event.preventDefault();
        _history.pushState({ id: cid }, '', url.href);
    }
}
function which(event) {
    return event.which === null ? event.button : event.which;
}
function find_anchor(node) {
    while (node && node.nodeName.toUpperCase() !== 'A')
        node = node.parentNode; // SVG <a> elements have a lowercase name
    return node;
}
function handle_popstate(event) {
    scroll_history[cid] = scroll_state();
    if (event.state) {
        const url = new URL(location.href);
        const target$$1 = select_route(url);
        if (target$$1) {
            navigate(target$$1, event.state.id);
        }
        else {
            location.href = location.href;
        }
    }
    else {
        // hashchange
        set_uid(uid + 1);
        set_cid(uid);
        _history.replaceState({ id: cid }, '', location.href);
    }
}


if (typeof window !== 'undefined') {
	import('./chunk.66640646.js').then(client => {
		client.connect(10000);
	});
}

start({
	target: document.querySelector('#sapper')
});
